!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADD_TIME	entity/models/SMS_SEND.py	/^    ADD_TIME = db.Column(DateTime)$/;"	v	class:SMS_SEND
AlchemyEncoder	core/AlchemyEncoder.py	/^class AlchemyEncoder(json.JSONEncoder):$/;"	c
AlchemyEncoder	core/model/AppReturnDTO.py	/^from app.core.AlchemyEncoder import AlchemyEncoder$/;"	i
AlchemyEncoder	login.py	/^from app.core.AlchemyEncoder import AlchemyEncoder$/;"	i
AlchemyEncoder	user.py	/^from app.core.AlchemyEncoder import AlchemyEncoder$/;"	i
AppDTO	core/model/AppDTO.py	/^class AppDTO(object):$/;"	c
AppReturnDTO	core/model/AppReturnDTO.py	/^class AppReturnDTO(object):$/;"	c
AppReturnDTO	entity/dal/UserDal.py	/^from app.core.model.AppReturnDTO import AppReturnDTO$/;"	i
AppReturnDTO	entity/models/DB_LoginModel.py	/^from app.core.model.AppReturnDTO import AppReturnDTO$/;"	i
AppReturnDTO	login.py	/^from app.core.model.AppReturnDTO import AppReturnDTO$/;"	i
AppReturnDTO	user.py	/^from app.core.model.AppReturnDTO import AppReturnDTO$/;"	i
Blueprint	__init__.py	/^from flask import Flask, Blueprint$/;"	i
CONTENT	entity/models/SMS_SEND.py	/^    CONTENT = db.Column(String(500))$/;"	v	class:SMS_SEND
CORS	__init__.py	/^from flask_cors import CORS$/;"	i
CREATE_TIME	entity/models/DB_UserModel.py	/^    CREATE_TIME = db.Column(db.DateTime)$/;"	v	class:USER
Column	entity/models/SMS_SEND.py	/^from sqlalchemy import Column, Integer, String, DateTime$/;"	i
Column	entity/mssql.py	/^from sqlalchemy import Column, String, create_engine  $/;"	i
Column	entity/mssql.py	/^from sqlalchemy import Table, MetaData, Column, Integer  $/;"	i
DISTRICT_ID	entity/models/DB_UserModel.py	/^    DISTRICT_ID = db.Column(db.Integer)$/;"	v	class:USER
Data	core/model/AppDTO.py	/^    Data={}$/;"	v	class:AppDTO
DateTime	entity/models/SMS_SEND.py	/^from sqlalchemy import Column, Integer, String, DateTime$/;"	i
DeclarativeMeta	core/AlchemyEncoder.py	/^from sqlalchemy.ext.declarative import DeclarativeMeta$/;"	i
EMAIL_ADDR	entity/models/DB_LoginModel.py	/^    EMAIL_ADDR = db.Column(db.String)$/;"	v	class:LOGIN
FAIL_COUNT	entity/models/DB_LoginModel.py	/^    FAIL_COUNT = db.Column(db.Integer)$/;"	v	class:LOGIN
Flask	__init__.py	/^from flask import Flask, Blueprint$/;"	i
Fun	core/Fun.py	/^class Fun(object):$/;"	c
Fun	entity/dal/UserDal.py	/^from app.core.Fun import Fun$/;"	i
Fun	login.py	/^from app.core.Fun import Fun$/;"	i
Fun	user.py	/^from app.core.Fun import Fun $/;"	i
Fun	views.py	/^import app.core.Fun$/;"	i
GUID	entity/models/SMS_SEND.py	/^    GUID = db.Column(String(32), primary_key=True)$/;"	v	class:SMS_SEND
HTTPTokenAuth	__init__.py	/^from flask_httpauth import HTTPTokenAuth$/;"	i
ICON_FILES_ID	entity/models/DB_UserModel.py	/^    ICON_FILES_ID = db.Column(db.Integer)$/;"	v	class:USER
ID	entity/models/DB_LoginModel.py	/^    ID = db.Column(db.Integer, primary_key=True)$/;"	v	class:LOGIN
ID	entity/models/DB_UserModel.py	/^    ID = db.Column(db.Integer, primary_key=True)$/;"	v	class:USER
IS_LOCKED	entity/models/DB_LoginModel.py	/^    IS_LOCKED = db.Column(db.Integer)$/;"	v	class:LOGIN
IS_LOCKED	entity/models/DB_UserModel.py	/^    IS_LOCKED = db.Column(db.Integer)$/;"	v	class:USER
Integer	entity/models/SMS_SEND.py	/^from sqlalchemy import Column, Integer, String, DateTime$/;"	i
Integer	entity/mssql.py	/^from sqlalchemy import Table, MetaData, Column, Integer  $/;"	i
LAST_ACTIVE_TIME	entity/models/DB_UserModel.py	/^    LAST_ACTIVE_TIME = db.Column(db.DateTime)$/;"	v	class:USER
LAST_LOGIN_TIME	entity/models/DB_UserModel.py	/^    LAST_LOGIN_TIME = db.Column(db.DateTime)$/;"	v	class:USER
LAST_LOGOUT_TIME	entity/models/DB_UserModel.py	/^    LAST_LOGOUT_TIME = db.Column(db.DateTime)$/;"	v	class:USER
LOCKED_REASON	entity/models/DB_LoginModel.py	/^    LOCKED_REASON = db.Column(db.String)$/;"	v	class:LOGIN
LOGIN	entity/dbModel.py	/^from app.entity.models.DB_LoginModel import LOGIN$/;"	i
LOGIN	entity/models/DB_LoginModel.py	/^class LOGIN(db.Model):$/;"	c
LOGIN_COUNT	entity/models/DB_UserModel.py	/^    LOGIN_COUNT = db.Column(db.Integer)$/;"	v	class:USER
LOGIN_NAME	entity/models/DB_LoginModel.py	/^    LOGIN_NAME = db.Column(db.String)$/;"	v	class:LOGIN
LOGIN_NAME	entity/models/DB_UserModel.py	/^    LOGIN_NAME = db.Column(db.String)$/;"	v	class:USER
Login	entity/dbModel.py	/^    Login=LOGIN$/;"	v	class:db_model
LoginManager	__init__.py	/^from flask_login import LoginManager$/;"	i
LoginManager	login.py	/^from flask_login import (LoginManager, login_required, login_user,$/;"	i
LogingModel	core/model/LogingModel.py	/^class LogingModel(object):$/;"	c
LogingModel	entity/dal/UserDal.py	/^from app.core.model.LogingModel import LogingModel$/;"	i
MESSAGE_ID	entity/models/SMS_SEND.py	/^    MESSAGE_ID = db.Column(Integer)$/;"	v	class:SMS_SEND
Message	core/model/AppDTO.py	/^    Message=""$/;"	v	class:AppDTO
MetaData	entity/mssql.py	/^from sqlalchemy import Table, MetaData, Column, Integer  $/;"	i
NAME	entity/models/DB_UserModel.py	/^    NAME = db.Column(db.String)$/;"	v	class:USER
PASSWORD	entity/models/DB_LoginModel.py	/^    PASSWORD = db.Column(db.String)$/;"	v	class:LOGIN
PASSWORD_COMPLEXITY	entity/dal/UserDal.py	/^from config import PASSWORD_COMPLEXITY, VERIFY_CODE$/;"	i
PASS_UPDATE_DATE	entity/models/DB_LoginModel.py	/^    PASS_UPDATE_DATE = db.Column(db.DateTime)$/;"	v	class:LOGIN
PHONE_NO	entity/models/DB_LoginModel.py	/^    PHONE_NO = db.Column(db.String)$/;"	v	class:LOGIN
PHONE_NO	entity/models/SMS_SEND.py	/^    PHONE_NO = db.Column(String(50))$/;"	v	class:SMS_SEND
PageParam	core/model/AppDTO.py	/^    PageParam=""$/;"	v	class:AppDTO
REMARK	entity/models/DB_UserModel.py	/^    REMARK = db.Column(db.String)$/;"	v	class:USER
SEND_TIME	entity/models/SMS_SEND.py	/^    SEND_TIME = db.Column(DateTime)$/;"	v	class:SMS_SEND
SMS_SEND	entity/dbModel.py	/^from app.entity.models.SMS_SEND import SMS_SEND$/;"	i
SMS_SEND	entity/models/SMS_SEND.py	/^class SMS_SEND(db.Model):$/;"	c
SQLAlchemy	__init__.py	/^from flask_sqlalchemy import SQLAlchemy$/;"	i
STAUTS	entity/models/SMS_SEND.py	/^    STAUTS = db.Column(String(15))$/;"	v	class:SMS_SEND
Serializer	entity/models/DB_LoginModel.py	/^from itsdangerous import (TimedJSONWebSignatureSerializer as Serializer,$/;"	i
SmsSend	entity/dbModel.py	/^    SmsSend=SMS_SEND$/;"	v	class:db_model
String	entity/models/SMS_SEND.py	/^from sqlalchemy import Column, Integer, String, DateTime$/;"	i
String	entity/mssql.py	/^from sqlalchemy import Column, String, create_engine  $/;"	i
TRY_NUM	entity/models/SMS_SEND.py	/^    TRY_NUM = db.Column(Integer)$/;"	v	class:SMS_SEND
Table	entity/mssql.py	/^from sqlalchemy import Table, MetaData, Column, Integer  $/;"	i
USER	entity/dal/UserDal.py	/^from app.entity.models.DB_UserModel import USER$/;"	i
USER	entity/dbModel.py	/^from app.entity.models.DB_UserModel import USER$/;"	i
USER	entity/models/DB_UserModel.py	/^class USER(db.Model,UserMixin):$/;"	c
USER	login.py	/^from app.entity.models.DB_UserModel import USER$/;"	i
User	core/model/AppDTO.py	/^    User=""$/;"	v	class:AppDTO
User	entity/dbModel.py	/^    User=USER$/;"	v	class:db_model
UserDal	entity/dal/UserDal.py	/^class UserDal(object):$/;"	c
UserDal	login.py	/^from app.entity.dal.UserDal import UserDal$/;"	i
UserDal	user.py	/^from app.entity.dal.UserDal import UserDal$/;"	i
UserDal	views.py	/^from app.entity.dal.UserDal import UserDal$/;"	i
UserMixin	entity/models/DB_UserModel.py	/^from flask_login import UserMixin$/;"	i
VERIFY_CODE	entity/dal/UserDal.py	/^from config import PASSWORD_COMPLEXITY, VERIFY_CODE$/;"	i
VERIFY_CODE	entity/models/DB_LoginModel.py	/^    VERIFY_CODE = db.Column(db.String)$/;"	v	class:LOGIN
VERIFY_TIME	entity/models/DB_LoginModel.py	/^    VERIFY_TIME = db.Column(db.DateTime)$/;"	v	class:LOGIN
__init__	core/model/AppReturnDTO.py	/^    def __init__(self, isSuccess=True, msg='', data=None, code=""):$/;"	m	class:AppReturnDTO
__init__	core/model/LogingModel.py	/^        def __init__(self):$/;"	m	class:LogingModel
__repr__	entity/models/DB_UserModel.py	/^    def __repr__(self):$/;"	m	class:USER	file:
__repr__	entity/models/SMS_SEND.py	/^    def __repr__(self):$/;"	m	class:SMS_SEND	file:
__tablename__	entity/models/DB_LoginModel.py	/^    __tablename__ = 'FA_LOGIN'$/;"	v	class:LOGIN
__tablename__	entity/models/DB_UserModel.py	/^    __tablename__ = 'FA_USER'$/;"	v	class:USER
__tablename__	entity/models/SMS_SEND.py	/^    __tablename__ = 'fa_sms_send'$/;"	v	class:SMS_SEND
and_	entity/dal/UserDal.py	/^from sqlalchemy import and_$/;"	i
and_	entity/dal/UserDal.py	/^from sqlalchemy import or_, and_, create_engine$/;"	i
app	__init__.py	/^app = Flask(__name__)$/;"	v
app	entity/models/DB_LoginModel.py	/^from app import db, app$/;"	i
app	entity/models/SMS_SEND.py	/^from app import db, app$/;"	i
app	login.py	/^from app import auth, login_manager, app$/;"	i
app	user.py	/^from app import auth, login_manager, app$/;"	i
app	views.py	/^from app import app, auth$/;"	i
app	views.py	/^import app.core.Fun$/;"	i
auth	__init__.py	/^auth = HTTPTokenAuth(scheme='Bearer')$/;"	v
auth	login.py	/^from app import auth, login_manager, app$/;"	i
auth	user.py	/^from app import auth, login_manager, app$/;"	i
auth	views.py	/^from app import app, auth$/;"	i
can	entity/models/DB_LoginModel.py	/^    def can(self, permission):$/;"	m	class:LOGIN
class_to_dict	core/Fun.py	/^    def class_to_dict(obj):$/;"	m	class:Fun
code	core/model/AppReturnDTO.py	/^    code = ""$/;"	v	class:AppReturnDTO
code	core/model/LogingModel.py	/^        code=None$/;"	v	class:LogingModel
connDb	entity/mssql.py	/^def connDb():$/;"	f
convert_to_dict	core/Fun.py	/^    def convert_to_dict(obj):$/;"	m	class:Fun
convert_to_dicts	core/Fun.py	/^    def convert_to_dicts(objs):$/;"	m	class:Fun
core	views.py	/^import app.core.Fun$/;"	i
create_engine	entity/dal/UserDal.py	/^from sqlalchemy import or_, and_, create_engine$/;"	i
create_engine	entity/mssql.py	/^from sqlalchemy import Column, String, create_engine  $/;"	i
data	core/model/AppReturnDTO.py	/^    data = {}$/;"	v	class:AppReturnDTO
datetime	core/AlchemyEncoder.py	/^import datetime$/;"	i
datetime	entity/dal/UserDal.py	/^import datetime$/;"	i
datetime	entity/models/DB_UserModel.py	/^import datetime$/;"	i
db	__init__.py	/^db = SQLAlchemy(app)$/;"	v
db	entity/dal/UserDal.py	/^from app import db$/;"	i
db	entity/models/DB_LoginModel.py	/^from app import db, app$/;"	i
db	entity/models/DB_UserModel.py	/^from app import db$/;"	i
db	entity/models/SMS_SEND.py	/^from app import db, app$/;"	i
db_model	entity/dal/UserDal.py	/^from app.entity.dbModel import db_model$/;"	i
db_model	entity/dbModel.py	/^class db_model(object):$/;"	c
default	core/AlchemyEncoder.py	/^    def default(self, obj):$/;"	m	class:AlchemyEncoder
flash	login.py	/^from flask import request, flash, g$/;"	i
g	login.py	/^from flask import request, flash, g$/;"	i
g	user.py	/^from flask import g,json$/;"	i
g	views.py	/^from flask import make_response, request, g$/;"	i
generate_auth_token	entity/models/DB_LoginModel.py	/^    def generate_auth_token(self, expiration=60000):$/;"	m	class:LOGIN
get_id	entity/models/DB_UserModel.py	/^    def get_id(self):$/;"	m	class:USER
hashlib	entity/dal/UserDal.py	/^import hashlib$/;"	i
imei	core/model/LogingModel.py	/^        imei=None$/;"	v	class:LogingModel
index	views.py	/^def index():$/;"	f
is_actice	entity/models/DB_UserModel.py	/^    def is_actice(self):$/;"	m	class:USER
is_adminstractor	entity/models/DB_LoginModel.py	/^    def is_adminstractor(self):$/;"	m	class:LOGIN
is_anonymous	entity/models/DB_UserModel.py	/^    def is_anonymous(self):$/;"	m	class:USER
is_authenticated	entity/models/DB_UserModel.py	/^    def is_authenticated(self):$/;"	m	class:USER
is_phonenum	core/Fun.py	/^    def is_phonenum(phone_num):$/;"	m	class:Fun
is_success	core/model/AppReturnDTO.py	/^    is_success = True$/;"	v	class:AppReturnDTO
json	core/AlchemyEncoder.py	/^import json$/;"	i
json	core/model/AppReturnDTO.py	/^import json$/;"	i
json	login.py	/^import json$/;"	i
json	user.py	/^from flask import g,json$/;"	i
login	__init__.py	/^from app import login $/;"	i
loginName	core/model/LogingModel.py	/^        loginName=''$/;"	v	class:LogingModel
login_manager	__init__.py	/^login_manager = LoginManager()$/;"	v
login_manager	login.py	/^from app import auth, login_manager, app$/;"	i
login_manager	user.py	/^from app import auth, login_manager, app$/;"	i
login_out	entity/dal/UserDal.py	/^    def login_out():$/;"	m	class:UserDal
login_reg	entity/dal/UserDal.py	/^    def login_reg(_inent):$/;"	m	class:UserDal
login_required	login.py	/^from flask_login import (LoginManager, login_required, login_user,$/;"	i
login_required	views.py	/^from flask_login import login_required$/;"	i
login_user	login.py	/^from flask_login import (LoginManager, login_required, login_user,$/;"	i
logout	login.py	/^def logout():$/;"	f
make_response	views.py	/^from flask import make_response, request, g$/;"	i
msg	core/model/AppReturnDTO.py	/^    msg = ""$/;"	v	class:AppReturnDTO
openid	core/model/LogingModel.py	/^        openid=None$/;"	v	class:LogingModel
or_	entity/dal/UserDal.py	/^from sqlalchemy import or_, and_, create_engine$/;"	i
par	core/model/AppDTO.py	/^    par=""$/;"	v	class:AppDTO
para	core/model/LogingModel.py	/^        para=None/;"	v	class:LogingModel
passWord	core/model/LogingModel.py	/^        passWord=None$/;"	v	class:LogingModel
password_complexity	core/Fun.py	/^    def password_complexity(passwd):$/;"	m	class:Fun
pollCode	core/model/LogingModel.py	/^        pollCode=None$/;"	v	class:LogingModel
pymssql	entity/mssql.py	/^import pymssql  $/;"	i
re	core/Fun.py	/^import re$/;"	i
request	login.py	/^from flask import request, flash, g$/;"	i
request	views.py	/^from flask import make_response, request, g$/;"	i
set_data	core/model/AppReturnDTO.py	/^    def set_data(self, data):$/;"	m	class:AppReturnDTO
single_user	entity/dal/UserDal.py	/^    def single_user(userId):$/;"	m	class:UserDal
type	core/model/LogingModel.py	/^        type=0$/;"	v	class:LogingModel
user	__init__.py	/^from app import user $/;"	i
userId	core/model/LogingModel.py	/^        userId=0$/;"	v	class:LogingModel
userName	core/model/LogingModel.py	/^        userName=None$/;"	v	class:LogingModel
user_login	entity/dal/UserDal.py	/^    def user_login(_inent):$/;"	m	class:UserDal
user_login	login.py	/^def user_login():$/;"	f
user_lsit	user.py	/^def user_lsit():$/;"	f
user_reg	login.py	/^def user_reg():$/;"	f
verify_auth_token	entity/dal/UserDal.py	/^    def verify_auth_token(token):$/;"	m	class:UserDal
verify_auth_token	entity/models/DB_LoginModel.py	/^    def verify_auth_token(token):$/;"	m	class:LOGIN
verify_token	views.py	/^def verify_token(token):$/;"	f
version	core/model/LogingModel.py	/^        version=None$/;"	v	class:LogingModel
views	__init__.py	/^from app import views $/;"	i
wraps	views.py	/^from functools import wraps$/;"	i
